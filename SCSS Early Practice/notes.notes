Syntastically Awesome Style Sheets
// CSS Object Model CSSOM.  Works with DOM to create Render Tree. Website rendering the visual formatting model. - > Final rendered website.
Example statements

View in Sass

nav {
    ul {
        margin: 0;
        padding: 0;
        list-style: none;
    }

    li {display: inline-block;}

    a {
        display: block;
        padding: 6px 12px;
        text-decoration: none
    }
}

View in CSS

nav ul {/*selector is this. everything else belongs to declaration block. the Property is something like margin while the declared value is the item that follows. Declaration in itself is the semi-colon.*/
    margin: 0;
    padding: 0;
    list-style: none;
}

nav li {
    display: inline-block;
}

nav a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
}

// Author declartion and user declartion are a thing. Anything I write is author. User when they are able to modify the page.

// Cascade looks at importance > specificity > source order.
// Author Declaration only trumps User when !important is used. Otherwise User wins unless default browser takes precidence.

// Specificity includes: inline styles, IDs, Classes,Peudo-classes,attribute, and Elements,pseudo-elements. When a property's declared value is created its precidence is determined by how many points it is earning by having one of each of the stated pieces of specificity. Keep in mind if inline styles had a point, it automatically wins unless another selector has more points in its favor.

// If all selectors are equal in points the last one created in the source file automatically wins. Yay for America in WW2!

Universal selector has no specifity value.

Rely more on specifity than on the order of selectors.
Rely on order when using 3rd-party stylesheets - always put your author stylesheet last.

links are considered elements they have the lowest specificity. Only becomes first with the addition of !important in the declaration.



How CSS VALUES ARE PROCESSED FROM

Declared value > 
Cascaded Value > 
Specified Value > 
Computed Value > 
Used Value > 
Actual Value (rounds values based on the amount of pixels present.)

Padding no declared of cascaded value. 
There is a specificity value which is 0px(inital value). Does not compute any further because it is an absolute value.
Root/Font-Size is browser default.

Inheritence = inherits value of parent element. a P with in a .section.

em uses parent's element's font size. 
rem follows the root font-size.
em differs slightly based on font and length. With font its value is multiplied by the parents px. While on length, it takes the value of the current element to multiply against.

vh and vw are based on viewport percentage.

Think Build Architect Mindset for

Think about the layout of your webpage or web app before writing code.

Build your layout in HTML and CSS with a consistent structure for naming classes.

Create a logical architecture for your CSS with files and folders.


#Basic Responsive Design Principles Review

1. Fluid Layouts
    To allow webpage to adapt ot the current viewport width (or even height)
    Use % (or vh / vw) unit instead of px for elements that should adapt to viewport (usually layout)
    Use max-width instead of width
   
2. Responsive Units
    Use rem unit instead of px for most lengths
    To make it easy to scale the entire layout down (or up) automatically
    
3. Flexible Images
    By default images don't scale automatically as we change the viewport, so we need to fix that.
    Always use % for image dimensions, together with the max-width property.

4. Media Queries
    To change CSS styles on certain viewport widths (called breakpoints)
    
    
Float Layouts - Old way of building layouts. Still is used but is getting outdated.
Flexbox - Modern way of laying out elements in a 1-dimensional row without using floats. Perfect for component layouts.
CSS Grid - For laying out element in a fully-fledged 2-dimensional grid. Perfect for page layouts and complex components.
