/* Browser Reset if needed. Helps CSS be displayed consistently across browsers. */

// Imports - the only purpose of the main file is to import all of the work done in all of the other files. Keeps all parts of the project manageable and configurable.
@import "abstracts/functions";
@import "abstracts/mixins";
@import "abstracts/variables";


@import "base/animations";
@import "base/base";
@import "base/typography";
@import "base/utilities";

@import "pages/home";
// Imports


// Variables
$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;
$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;
// Variables

// Keyframes
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }
    80% {
        transform: translateX(1rem);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}
/* for browser importance it is important to only animate 2 properties at a time. That is what the browser is optimized for. Particularly opacity and transform. */
@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }
    80% {
        transform: translateX(-1rem);
    } 
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveInButton {
    0% {
        opacity: 0;
        transform: translateY(30px);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}
// Keyframes

*, 
*::after, 
*::before {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

html {
    font-size: 62.5%; /*this changes the root value of font pixels. rem no longer = 16px. It is not equal to 10px. User can't affect this which leads to this to be considered a bad practice. To get the current calculation we take 16/10. The percentage sign allows for the page to be scaleable for users without issues now. It was scalable when the root font-size is never modified or addressed but in order to create a better author experience we have to interact with the html font-size/root in order to avoid too many hassles when creating media queries down the road. rem is not supported on internet explorer 9 and below... but thankfully it has been put to rest.*/
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 1.6krem;
    line-height: 1.7;
    color: #777;
    padding: 3rem;
    box-sizing: Border-box;
    /* ensures border and padding are not applied to the total width or height of the container.*/
}

.header {
    position: relative;
    /* setting this to relative allows the logo box's position of absolute become adjustable to the edge of the the header box. */
    height: 95vh;
    background-image: linear-gradient(
        to right bottom, 
        rgba($color-primary-light, .8),
        rgba($color-primary-dark, .8)),
        url(../img/hero.jpg);
        /* Allows for easier reading */
    background-size: cover;
    background-position: top;
    /* ensures top of the image always stays at the top of the container. */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    /* TL TR BR BL */
    
    &__logo-box {
        position: absolute;
        top: 4rem;
        left: 4rem;
    }
    
    &__logo {
        height: 3.5rem; /*width is automatically determined.*/
    }
    
    &__text-box {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -54%); /*makes it not longer in relationship with the parent element itself.*/
        text-align: center;
    
    }
}


.heading-primary {
    color: $color-white;
    text-transform: uppercase;
    backface-visibility: hidden; /*hides shakeyness after the keyframes animation. Determines if back part of an element is visible or hidden to a user*/
    margin-bottom: 60px;
    &--main {
        display: block; /*occupy entire width available. Creates line breaks before and after them*/
        font-size:6rem;
        font-weight: 400;
        letter-spacing: 3.5rem;
        animation-name: moveInLeft;
        animation-duration: 1s;
        animation-timing-function: ease-out;
    }
    
    &--sub {
        display: block; /*occupy entire width available. Creates line breaks before and after them*/
        font-size: 2rem;
        font-weight: 700;
        letter-spacing: 1.75rem;
        animation-name: moveInRight;
        animation-duration: 1s;
        animation-timing-function: ease-out;
        /* animation-delay: 3s; */
        /* animation-iteration-count: 3; how many times the animation occurs */
        /* animation-timing-function: ease-in; */
    }
}


.btn{
    &:link, &:visited { /*link is a suedoclass.*/
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.5rem 4rem;
        border-radius: 100px;
        display: inline-block; /*allows block element to work on this element as well.*/
        transition: all .2s; /*helps set up transitions to be smoother.  This has to occur on the initial state.*/
        position: relative; /*ensures that the btn-white::after does not cover up the entire text-box*/
        font-size: 1.6rem;
        
        &:hover {
            transform: translateY(-3px);
            box-shadow: 0 1rem 2rem rgba($color-black, .2); /*x y blur color*/
           
            &::after {
                transform: scaleX(1.4) scaleY(1.6);
                opacity: 0;
            }
        }
        
        &:active {
            transform: translateY(-1px);
            box-shadow: 0 .5rem 1rem rgba($color-black, .2);
        }
    }


    &--white {
        background-color: $color-white;
        color: $color-grey-dark;
        font-size: 2rem;
        &::after {
            background-color: $color-white;
        }
    }
    
    &::after { /*this is treated like the child of the original button and is behind it*/
        content: "";
        display: inline-block;
        height: 100%;
        width: 100%;
        border-radius: 100px;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        transition: all .4s;
    }

    &--animated {
        animation: moveInButton .5s ease-out .75s;
        animation-fill-mode: backwards; /*automatically apply animations of 0% before it even begins.*/
        /* 
        animation-name: moveInButton
        animation-duration: 1s;
        animation-delay: .75s;
        animation-timing-function: ease-out; 
        these are all combined into one property. */
    }
}


footer {
    color: rgb(160, 167, 175);
    width: 100%;
    margin-top: 2.5rem;
    position: relative;
    text-align: center;
    bottom: 3rem;
    z-index: -1;
}

// Make sure int he json file that you create the script "compile:sass": "node-sass sass/main.scss css/style.css -w" The -w is important if you want to avoid all of the copy and pasting you did earlier and all of the terminal work you did as well. Do this to make the process easier so that you can close out style.css and just focuss on the scss file.
// Otherwise compile may not work. Also, save once you make ;)

.row {
    max-width: $grid-width; //this width is standard in web development. 1140px
    background-color: #eee;
    margin: 0 auto;
    margin-bottom: $gutter-vertical;

    &:not(:last-child) { //not states that everything is being selected except for the argument, in that case the last-child.
        margin-bottom: $gutter-vertical;

    }

    @include clearfix;
    
    [class^="col-"] { //^ = beginning, $ = ends with.
        background-color: orangered;
        float: left;
        &:not(:last-child) {
            margin-right: $gutter-horizontal;
            
        }
    }//this... class^="col" does not need to have the other columns nested within it.

        .col-1-of-2 {
            width: calc((100% - #{$gutter-horizontal}) / 2);//calc allow units to be mixed. Can't forget the hashtag.
            
        }
        
        .col-1-of-3 {
            width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
            
        }

        .col-1-of-4 {
            width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
            
        }

        .col-2-of-3 {
            width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
        }

        .col-2-of-4 {
            width: calc((100% - #{$gutter-horizontal}) / 2);
        }

        .col-3-of-4 {
            width: calc(((300% - #{$gutter-horizontal}) / 4));
        }
    }